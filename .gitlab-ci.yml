stages:
  - assume_role
  - login
  - build-and-push

variables:
  AWS_ACCOUNT_ID: ""
  AWS_REGION: ""
  ECR_REGISTRY: "000000000000.dkr.ecr.eu-west-1.amazonaws.com"
  ECR_REPOSITORY: ""
  IMAGE_TAG: "$CI_COMMIT_SHA"

assume_role:
  stage: assume_role
  id_tokens:
    ID_TOKEN_1:
      aud: AWS-JWT  
  script:
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn "arn:aws:iam::$AWS_ACCOUNT_ID:role/gitlab-role"
      --role-session-name "gitlab-role"
      --web-identity-token $ID_TOKEN_1
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))      
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"
    - aws sts get-caller-identity

login_to_aws:
  stage: login
  script:
    - $(aws ecr get-login --no-include-email | docker login --username AWS --password-stdin $ECR_REGISTRY)

build_and_push_to_ecr:
  stage: build-and-push
  image: docker:19.03.12
  dependencies:
    - login_to_aws
  script:
    # Build the Docker image
    - docker build --build-arg NEXTAUTH_SECRET=$NEXTAUTH_SECRET \
      --build-arg NEXTAUTH_URL=$NEXTAUTH_URL \
      --build-arg GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID \
      --build-arg GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET \
      --build-arg DB_NAME=$DB_NAME \
      --build-arg MONGODB_URI=$MONGODB_URI -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    # Push the Docker image to ECR
    # - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
